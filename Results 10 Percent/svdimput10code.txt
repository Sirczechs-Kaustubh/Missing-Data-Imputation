# Load necessary libraries
library(dplyr)
library(ggplot2)
library(ggrepel)
library(reshape2)
library(broom)
library(tidyr)

# Define the color palette for the genes
set.seed(123)
gene_colors <- sample(colors(), 39)  # Adjust the number of colors based on the number of genes

# Function to generate volcano plot for a given dataset and collect significant genes
generate_volcano_plot_and_collect_genes <- function(file_path, method_name, gene_colors) {
    df <- read.csv(file_path)
    df$id <- 1:nrow(df)
    df_long <- melt(df, id.vars = 'id', variable.name = 'Gene', value.name = 'Expression')
    
    # Convert Expression column to numeric, coercing invalid entries to NA
    df_long$Expression <- suppressWarnings(as.numeric(as.character(df_long$Expression)))
    
    # Remove rows with NA, NaN, or Inf values
    df_long <- df_long %>% filter(!is.na(Expression) & !is.infinite(Expression) & !is.nan(Expression))
    
    # Add a 'Group' column to simulate different imputation methods (replace with actual groups if available)
    set.seed(123) # For reproducibility
    df_long$Group <- sample(c('Method1', 'Method2', 'Method3'), nrow(df_long), replace = TRUE)
    
    # Perform ANOVA for each gene
    anova_results <- df_long %>%
        group_by(Gene) %>%
        filter(!is.na(Expression)) %>%
        do(tidy(aov(Expression ~ Group, data = .)))
    
    # Extract p-values and calculate adjusted p-values
    p_values <- anova_results %>% filter(term == 'Group') %>% pull(p.value)
    adjusted_p_values <- p.adjust(p_values, method = 'fdr')
    
    # Calculate log2 fold changes
    log2fc <- df_long %>%
        group_by(Gene, Group) %>%
        summarise(mean_expression = mean(Expression, na.rm = TRUE), .groups = 'drop') %>%
        pivot_wider(names_from = Group, values_from = mean_expression) %>%
        mutate(log2FC = log2(ifelse(Method1 != 0, Method2 / Method1, NA)))  # Handle division by zero
    
    # Filter out rows with NA/NaN/Inf values in the log2FC column
    log2fc <- log2fc %>% filter(!is.na(log2FC) & !is.infinite(log2FC) & !is.nan(log2FC))
    
    # Merge results to handle different row numbers
    anova_results_filtered <- anova_results %>% filter(term == 'Group') %>% select(Gene, p.value)
    log2fc_filtered <- log2fc %>% select(Gene, log2FC)
    merged_results <- merge(anova_results_filtered, log2fc_filtered, by = "Gene")
    merged_results$AdjustedPValue <- adjusted_p_values[1:nrow(merged_results)]
    
    results <- merged_results
    
    results$Expression <- 'Not Significant'
    results$Expression[results$log2FC >= 0.15 & results$AdjustedPValue <= 0.1] <- 'Upregulated'  # Adjust threshold
    
    # Create the volcano plot
    p <- ggplot(results, aes(log2FC, -log10(AdjustedPValue), color = Gene)) +
        geom_point(size = 2, alpha = 0.6) +
        scale_color_manual(values = gene_colors) +
        xlab("log2FC") +
        ylab("-log10(Adjusted P-Value)") +
        geom_vline(xintercept = 0.15, linetype="dotted", color="black") +
        geom_hline(yintercept = -log10(0.1), linetype="dotted", color="black") +  # Adjust threshold
        ggtitle(paste("Volcano Plot -", method_name)) +
        theme_minimal() +
        theme(legend.position = "none", # Hide legend
              plot.title = element_text(hjust = 0.5, face="bold", size=14),
              axis.title = element_text(face="bold", size=12),
              axis.text = element_text(size=10))
    
    # Identify top significant genes for labeling
    top_genes <- results %>% arrange(AdjustedPValue) %>% head(10)
    
    # Add labels to the top genes with increased max.overlaps
    p <- p +
        geom_label_repel(data = top_genes,
                         mapping = aes(log2FC, -log10(AdjustedPValue), label = Gene),
                         size = 3, box.padding = 0.3, point.padding = 0.3, segment.color = 'grey50',
                         max.overlaps = 20)  # Increased max.overlaps
    
    # Ensure the plot is printed
    print(p)
    
    # Save the plot as a PNG file
    ggsave(paste0("Volcano_Plot_", method_name, ".png"), p, width=10, height=7, dpi=300)
    
    # Collect significant genes
    significant_genes <- results$Gene[results$AdjustedPValue <= 0.1]
    
    return(significant_genes)
}

# File path for SVD_imp_10 dataset
file_path_svd <- "C:/Users/Sammy/Documents/Missing data/Imputations/10 percent/SVD_imp_10_2024-06-24.csv"

# Generate volcano plot and collect significant genes for SVD_imp_10 dataset
method_name_svd <- "SVD_imp_10"
significant_genes_svd <- generate_volcano_plot_and_collect_genes(file_path_svd, method_name_svd, gene_colors)

# Print significant genes
print(significant_genes_svd)
